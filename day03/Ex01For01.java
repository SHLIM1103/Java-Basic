package day03;
// 반복문
// 반복문이란 특정 조건이 true가 나오는 동안 코드 블럭을 반복시키는 코드이다.

// 반복문에는 for반복문과 while반복문 2가지가 있다.
//  1. for반복문  : 비교적 횟수가 명확하게 나옴
//                제어변수가 특정 조건식을 만족하는 동안 코드를 반복하고, 제어변수의 값을 변화시켜서
//                다시 조건식을 체크하여 true면 반복, false면 반복 종료가 된다.
//  2. while반복문: 조건식이 true인 동안 계속 돌아감.
//                

public class Ex01For01 {
    public static void main(String[] args) {

        // for반복문은 아래와 같은 양식을 가진다.
        // ※ for(제어변수의 선언과 초기화; 조건식; 변화식) {
        //      반복할 코드} ※

        // 제어변수는 for문 이전에 선언 및 초기화해주어도 된다.
        // 제일 보편적인 형태는 아래와 같다.
        for(int i = 0 ; i < 4 ; i++) {
            System.out.println("i의 현재값: " + i);
        }
        // 위 소스코드 실행 순서
        // int i ---> i = 0 ---> i < 4 ---> sysout("i의 현재값" + i) ---> i++
        // 이후로는 i < 4 ---> sysout() ---> i++ ---> i < 4 ---> ... i < 4 가 false가 나올때까지 반복

        // 전통적으로 for반복문의 제어변수는 i -> j -> k -> ... 순으로 들어간다
        // 또한 제어변수의 초기화나 조건식에 다른 변수가 들어갈 수도 있다.

        // 하지만, 맨 처음부터 조건식이 false가 나온다면 해당 반복문은 아예 실행되지 않는다.
        for(int i = 10 ; i < 0 ; i++) {
            System.out.println("실행될까?!");
        }

        // 또한, 흔히 하는 실수 중 for문 바로 뒤에 ;를 붙이게 되면 의미가 달라진다.
        for(int i = 0 ; i < 4 ; i++);{
            System.out.println("몇번 반복될까?!");
        }
        // 위 코드에서 ;이 붙음으로써 해당 for문은 반복할 내용이 없는 반복문이 된다.
        // 즉, 정상적이었으면 sysout("몇번 반복될까?!); 가 메모리 영역에 4번 등록되지만,
        // 위의 경우에는 딱 1번 등록된다.
        // 즉 해당 코드 블럭은 for반복문에 포함된 것이 아니라 그저 별게의 코드 한 줄이 된 것이다.

        // 또한 제어변수는 해당 for문에서 선언되었을 때에는, 범위가 해당 for문이다.
        for(int i = 0 ; i < 4 ; i++) {
            System.out.println(i);  // 여기는 i의 해당 범위이므로 문제없
        }
        //System.out.println(i);      // i의 해당 범위를 벗어났으므로 에러
        
        // 제어변수를 밖으로 빼서 선언 및 초기화할 때에는 아래와 같은 형태를 가지게 된다.
        int i = 10 ;
        for(; i < 13 ; i++) {
            System.out.println(i);
        } 
        // for반복문의 () 안에는 무조건 ;이 2번 나와야 한다.
        // 그러므로 선언과 초기화를 밖으로 뺄 때에는 ※ ; 조건식 ; 변화식 ※ 형식으로 입력해야 한다.
        
    }
}
